[
  {
    "contents" : "include(FetchContent)\n\nset(FLATPAK_SOURCE_OUTPUT\n    \"${CMAKE_BINARY_DIR}/flatpak_source.json\"\n    CACHE STRING \"\")\n\nfunction(init_flatpak_source_file)\n  set(flatpak_source\n      \"[{\\\"type\\\": \\\"inline\\\", \\\"dest-filename\\\": \\\"flatpak-provider.cmake\\\"}]\")\n  file(READ \"${CMAKE_CURRENT_FUNCTION_LIST_FILE}\" flatpak_provider_content)\n  string(REPLACE \"\\\\\" \"\\\\\\\\\" flatpak_provider_content\n                 \"${flatpak_provider_content}\")\n  string(REPLACE \"\\\"\" \"\\\\\\\"\" flatpak_provider_content\n                 \"${flatpak_provider_content}\")\n  set(flatpak_source\n      \"[{\n        \\\"type\\\": \\\"inline\\\",\n        \\\"dest-filename\\\": \\\"flatpak-provider.cmake\\\",\n        \\\"contents\\\": \\\"${flatpak_provider_content}\\\"\n    }]\")\n  file(WRITE \"${FLATPAK_SOURCE_OUTPUT}\" \"${flatpak_source}\")\nendfunction()\n\ninit_flatpak_source_file()\n\nfunction(to_flatpak_source dep_name)\n  set(options EXCLUDE_FROM_ALL)\n  set(oneValueArgs EXTERNALPROJECT_INTERNAL_ARGUMENT_SEPARATOR)\n  set(multiValueArgs\n      SOURCE_DIR\n      BINARY_DIR\n      # --- git ---\n      GIT_REPOSITORY\n      GIT_TAG\n      GIT_SHALLOW\n      GIT_REMOTE_NAME\n      GIT_SUBMODULES\n      GIT_SUBMODULES_RECURSE\n      GIT_PROGRESS\n      GIT_CONFIG\n      GIT_REMOTE_UPDATE_STRATEGY\n      # --- url ---\n      URL\n      URL_HASH\n      URL_MD5\n      DOWNLOAD_NAME\n      DOWNLOAD_NO_EXTRACT\n      DOWNLOAD_NO_PROGRESS\n      TIMEOUT\n      INACTIVITY_TIMEOUT\n      HTTP_USERNAME\n      HTTP_PASSWORD\n      HTTP_HEADER\n      TLS_VERSION\n      TLS_VERIFY\n      TLS_CAINFO\n      NETRC\n      NETRC_FILE\n      # --- svn ---\n      SVN_REPOSITORY\n      SVN_REVISION\n      SVN_USERNAME\n      SVN_PASSWORD\n      SVN_TRUST_CERT\n      # ---- unsed ----\n      HG_REPOSITORY # <url>\n      HG_TAG # <tag>\n      CVS_REPOSITORY # <cvsroot>\n      CVS_MODULE # <mod>\n      CVS_TAG # <tag>\n      UPDATE_COMMAND # <cmd>...\n      UPDATE_DISCONNECTED # <bool>\n      PATCH_COMMAND # <cmd>...\n      CONFIGURE_COMMAND # <cmd>...\n      CMAKE_COMMAND # /.../cmake\n      CMAKE_GENERATOR # <gen>\n      CMAKE_GENERATOR_PLATFORM # <platform>\n      CMAKE_GENERATOR_TOOLSET # <toolset>\n      CMAKE_GENERATOR_INSTANCE # <instance>\n      CMAKE_ARGS # <arg>...\n      CMAKE_CACHE_ARGS # <arg>...\n      CMAKE_CACHE_DEFAULT_ARGS # <arg>...\n      SOURCE_SUBDIR # <dir>\n      CONFIGURE_HANDLED_BY_BUILD # <bool>\n      BUILD_COMMAND # <cmd>...\n      BUILD_IN_SOURCE # <bool>\n      BUILD_ALWAYS # <bool>\n      BUILD_BYPRODUCTS # <file>...\n      BUILD_JOB_SERVER_AWARE # <bool>\n      INSTALL_COMMAND # <cmd>...\n      INSTALL_BYPRODUCTS # <file>...\n      INSTALL_JOB_SERVER_AWARE # <bool>\n      TEST_COMMAND # <cmd>...\n      TEST_BEFORE_INSTALL # <bool>\n      TEST_AFTER_INSTALL # <bool>\n      TEST_EXCLUDE_FROM_MAIN # <bool>\n      LOG_DOWNLOAD # <bool>\n      LOG_UPDATE # <bool>\n      LOG_PATCH # <bool>\n      LOG_CONFIGURE # <bool>\n      LOG_BUILD # <bool>\n      LOG_INSTALL # <bool>\n      LOG_TEST # <bool>\n      LOG_MERGED_STDOUTERR # <bool>\n      LOG_OUTPUT_ON_FAILURE # <bool>\n      USES_TERMINAL_DOWNLOAD # <bool>\n      USES_TERMINAL_UPDATE # <bool>\n      USES_TERMINAL_PATCH # <bool>\n      USES_TERMINAL_CONFIGURE # <bool>\n      USES_TERMINAL_BUILD # <bool>\n      USES_TERMINAL_INSTALL # <bool>\n      USES_TERMINAL_TEST # <bool>\n      DEPENDS # <targets>...\n      STEP_TARGETS # <step-target>...\n      INDEPENDENT_STEP_TARGETS # <step-target>...\n  )\n  cmake_parse_arguments(EP \"${options}\" \"${oneValueArgs}\" \"${multiValueArgs}\"\n                        ${ARGN})\n\n  set(source_type \"\")\n  set(url \"\")\n  set(dest \"build/_flatpak_deps/${dep_name}-src\")\n\n  set(tag \"\")\n  set(branch \"\")\n  set(commit \"\")\n\n  set(md5 \"\")\n  set(sha1 \"\")\n  set(sha256 \"\")\n  set(sha512 \"\")\n  set(dest_filename \"\")\n  set(disable_shallow_clone \"false\")\n  set(disable_submodules \"false\")\n\n  set(revision \"\")\n  if(DEFINED EP_EXCLUDE_FROM_ALL)\n    set(${dep_name}_exclude_from_all\n        ON\n        PARENT_SCOPE)\n  endif()\n\n  if(EP_GIT_REPOSITORY)\n    set(url ${EP_GIT_REPOSITORY})\n    set(source_type \"git\")\n    if(EP_GIT_TAG)\n      string(LENGTH \"${EP_GIT_TAG}\" len)\n      if(${len} EQUAL 40)\n        set(commit \"${EP_GIT_TAG}\")\n      else()\n        set(tag \"${EP_GIT_TAG}\")\n      endif()\n    endif()\n\n    if(GIT_SHALLOW)\n      if(GIT_SHALLOW EQUAL TRUE)\n        set(disable_shallow_clone \"false\")\n      else()\n        set(disable_shallow_clone \"true\")\n      endif()\n    endif()\n\n    cmake_policy(GET CMP0097 cmp0097)\n    if(\"${cmp0097}\" STREQUAL \"NEW\")\n      set(disable_submodules \"false\")\n      if(DEFINED EP_GIT_SUBMODULES)\n        if(EP_GIT_SUBMODULES) # empty\n          set(disable_submodules \"true\")\n        endif()\n      endif()\n    endif()\n  elseif(EP_URL)\n    set(url ${EP_URL})\n    if(EP_DOWNLOAD_NO_EXTRACT)\n      set(source_type \"file\")\n    else()\n      set(source_type \"archive\")\n    endif()\n\n    if(EP_DOWNLOAD_NAME)\n      set(dest_filename \"${EP_DOWNLOAD_NAME}\")\n    endif()\n\n    if(EP_URL_MD5)\n      set(md5 \"${EP_URL_MD5}\")\n    endif()\n    if(EP_URL_HASH)\n      set(hash_regex \"^([a-zA-Z0-9]+)=(.+)$\")\n      string(REGEX REPLACE \"${hash_regex}\" \"\\\\1\" hash_type \"${EP_URL_HASH}\")\n      string(REGEX REPLACE \"${hash_regex}\" \"\\\\2\" hash_val \"${EP_URL_HASH}\")\n      if(\"${hash_type}\" STREQUAL \"sha1\")\n        set(sha1 ${hash_val})\n      elseif(\"${hash_type}\" STREQUAL \"sha256\")\n        set(sha256 ${hash_val})\n      elseif(\"${hash_type}\" STREQUAL \"sha512\")\n        set(sha512 ${hash_val})\n      elseif(\"${hash_type}\" STREQUAL \"md5\")\n        set(md5 ${hash_val})\n      else()\n        message(WARNING \"flatpak don't support source type: ${hash_type}\")\n      endif()\n    endif()\n  elseif(EP_SVN_REPOSITORY)\n    set(url \"${EP_SVN_REPOSITORY}\")\n    set(source_type \"svn\")\n    if(EP_SVN_REVISION)\n      set(revision \"${EP_SVN_REVISION}\")\n    endif()\n  endif()\n\n  if(NOT source_type)\n    message(FATAL_ERROR \"flaptak only support FetchContent with git,url,svn\")\n  endif()\n\n  set(source \"{}\")\n\n  string(JSON source SET \"${source}\" url \"\\\"${url}\\\"\")\n  string(JSON source SET \"${source}\" type \\\"${source_type}\\\")\n  string(JSON source SET \"${source}\" dest \\\"${dest}\\\")\n\n  if(\"${source_type}\" STREQUAL \"git\")\n    if(tag)\n      string(JSON source SET \"${source}\" tag \\\"${tag}\\\")\n    elseif(branch)\n      string(JSON source SET \"${source}\" branch \\\"${branch}\\\")\n    elseif(commit)\n      string(JSON source SET \"${source}\" commit \\\"${commit}\\\")\n    endif()\n    string(JSON source SET \"${source}\" \"disable-shallow-clone\"\n           \"${disable_shallow_clone}\")\n  else()\n    if(dest_filename)\n      string(JSON source SET \"${source}\" \"dest-filename\" \\\"${dest_filename}\\\")\n    endif()\n    if(md5)\n      string(JSON source SET \"${source}\" md5 \\\"${md5}\\\")\n    elseif(sha512)\n      string(JSON source SET \"${source}\" sha512 \\\"${sha512}\\\")\n    elseif(sha256)\n      string(JSON source SET \"${source}\" sha256 \\\"${sha256}\\\")\n    elseif(sha1)\n      string(JSON source SET \"${source}\" sha1 \\\"${sha1}\\\")\n    endif()\n  endif()\n\n  file(READ \"${FLATPAK_SOURCE_OUTPUT}\" flatpak_source)\n  string(JSON source_len LENGTH \"${flatpak_source}\")\n  string(JSON flatpak_source SET \"${flatpak_source}\" ${source_len} \"${source}\")\n  file(WRITE \"${FLATPAK_SOURCE_OUTPUT}\" \"${flatpak_source}\")\nendfunction()\n\nmacro(flatpak_provider method dep_name)\n  __fetchcontent_getsaveddetails(\"${dep_name}\" fetch_details)\n  set(${dep_name}_exclude_from_all false)\n  to_flatpak_source(\"${dep_name}\" ${fetch_details})\n\n  if(NOT DEFINED \"${dep_name}_SOURCE_DIR\")\n\n    if(DEFINED ENV{FLATPAK_ID})\n      message(\"flatpak_provider: ${dep_name}\")\n      set(${dep_name}_SOURCE_DIR\n          \"$ENV{FLATPAK_BUILDER_BUILDDIR}/build/_flatpak_deps/${dep_name}-src\")\n      set(${dep_name}_BINARY_DIR\n          \"$ENV{FLATPAK_BUILDER_BUILDDIR}/build/_flatpak_deps/${dep_name}-build\"\n      )\n      if(EXISTS \"${${dep_name}_SOURCE_DIR}/CMakeLists.txt\")\n        set(${dep_name}_extra)\n        if(${${dep_name}_exclude_from_all})\n          set(${dep_name}_extra EXCLUDE_FROM_ALL)\n        endif()\n        message(\"extra: ${${dep_name}_extra}\")\n        add_subdirectory(\"${${dep_name}_SOURCE_DIR}\"\n                         \"${${dep_name}_BINARY_DIR}\" ${${dep_name}_extra})\n      endif()\n      # flatpak-builder\n      fetchcontent_setpopulated(\n        ${dep_name} SOURCE_DIR \"${${dep_name}_SOURCE_DIR}\" BINARY_DIR\n        \"${${dep_name}_BINARY_DIR}\")\n    else()\n      # forward\n      FetchContent_MakeAvailable(${dep_name})\n    endif()\n  endif()\n\nendmacro()\n\ncmake_language(SET_DEPENDENCY_PROVIDER flatpak_provider SUPPORTED_METHODS\n               FETCHCONTENT_MAKEAVAILABLE_SERIAL)\n",
    "dest-filename" : "flatpak-provider.cmake",
    "type" : "inline"
  },
  {
    "commit" : "dacb8a9e7492c2b6231957c05b8f6fa4152d49cd",
    "dest" : "build/_flatpak_deps/rstd-src",
    "disable-shallow-clone" : false,
    "type" : "git",
    "url" : "https://github.com/hypengw/rstd.git"
  },
  {
    "commit" : "6983466aadd1173627b362ff1a297527d9842531",
    "dest" : "build/_flatpak_deps/random-src",
    "disable-shallow-clone" : false,
    "type" : "git",
    "url" : "https://github.com/ilqvya/random.git"
  },
  {
    "commit" : "631237acd4e20251c7f702db5e5434c83f0e336d",
    "dest" : "build/_flatpak_deps/KDSingleApplication-src",
    "disable-shallow-clone" : false,
    "type" : "git",
    "url" : "https://github.com/KDAB/KDSingleApplication.git"
  },
  {
    "dest" : "build/_flatpak_deps/asio-src",
    "disable-shallow-clone" : false,
    "tag" : "asio-1-34-0",
    "type" : "git",
    "url" : "https://github.com/chriskohlhoff/asio.git"
  },
  {
    "dest" : "build/_flatpak_deps/pegtl-src",
    "disable-shallow-clone" : false,
    "tag" : "3.2.8",
    "type" : "git",
    "url" : "https://github.com/taocpp/PEGTL.git"
  },
  {
    "commit" : "e0f36500bc941fe447718ab625490728790c933f",
    "dest" : "build/_flatpak_deps/ctre-src",
    "disable-shallow-clone" : false,
    "type" : "git",
    "url" : "https://github.com/hanickadot/compile-time-regular-expressions.git"
  },
  {
    "commit" : "78b2bce70e0d1c21d3c175b72f322c50801b2e94",
    "dest" : "build/_flatpak_deps/cubeb-src",
    "disable-shallow-clone" : false,
    "type" : "git",
    "url" : "https://github.com/mozilla/cubeb.git"
  },
  {
    "commit" : "f518c28caceec1a91ee88cc88d843ba22dc0dbba",
    "dest" : "build/_flatpak_deps/ncrequest-src",
    "disable-shallow-clone" : false,
    "type" : "git",
    "url" : "https://github.com/hypengw/ncrequest.git"
  },
  {
    "dest" : "build/_flatpak_deps/pegtl-src",
    "disable-shallow-clone" : false,
    "tag" : "3.2.8",
    "type" : "git",
    "url" : "https://github.com/taocpp/PEGTL.git"
  },
  {
    "commit" : "dacb8a9e7492c2b6231957c05b8f6fa4152d49cd",
    "dest" : "build/_flatpak_deps/rstd-src",
    "disable-shallow-clone" : false,
    "type" : "git",
    "url" : "https://github.com/hypengw/rstd.git"
  }
]